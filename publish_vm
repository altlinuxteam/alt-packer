#! /bin/sh
set -euo pipefail

TOKEN=${TOKEN}

orgname=${orgname:-BaseALT}
target=${target:-alt-server}
arch=${arch:-x86_64}
BASE_VERSION=${BASE_VERSION:-9}
TARGET_VERSION=${TARGET_VERSION:-9}
VM_TYPE=${VM_TYPE:-qemu}
publish_command="vagrant cloud publish"

# Check that the variable is set to correct value
# $1 - variable name
# $2 - variable value
# $* - list of all possible values
assert_value() {
	variable_name="${1}"
	variable_value="${2}"
	shift 2
	possible_values="$*"
	comparison_success=false

	echo "CHECKING: ${variable_name}, must be one of: ${possible_values}"

	for pval in ${possible_values}; do
		if test "${variable_value}" == "${pval}"; then
			comparison_success=true
			break
		fi
	done

	if test "${comparison_success}" == "true"; then
		echo "CHECKING: ${variable_name}, SUCCESS"
		return 0
	else
		echo "CHECKING: ${variable_name}, FAIL"
		return 1
	fi
}

main() {
	assert_value target ${target} alt-server alt-workstation alt-kworkstation
	assert_value arch ${arch} x86_64
	assert_value BASE_VERSION ${BASE_VERSION} '8.2' 8sp 9 sisyphus
	assert_value TARGET_VERSION ${TARGET_VERSION} '8.2' 8sp 9 sisyphus
	assert_value VM_TYPE ${VM_TYPE} qemu onebula vbox

	vagrantcloud_path=${orgname}/${target}-${BASE_VERSION}-${arch}
	box_file=results/${VM_TYPE}-${target}-${BASE_VERSION}-${arch}.box

	provider="${VM_TYPE}"
	if test "${VM_TYPE}" == "vbox"; then
		provider="virtualbox"
	fi
	if test "${VM_TYPE}" == "onebula"; then
		echo "OpenNebula provider is not supported by Vagrant Cloud"
		exit 1
	fi
	assert_value provider ${provider} virtualbox qemu libvirt

	vagrant cloud auth login ${TOKEN}
	${publish_command} -u ${USERNAME} \
		${vagrantcloud_path} \
		1.0.0 \
		${provider} \
		${box_file}
	vagrant cloud auth logout
}

main

